<div class="min-h-screen flex flex-col items-center justify-center bg-gray-900 text-white p-4">
  <div class="bg-gray-800 p-8 rounded-lg shadow-md w-full max-w-lg border border-green-500">
    <h2 class="text-white text-3xl font-bold mb-6 text-center">Criar Novo Chamado</h2>

    <% if flash[:alert] %>
      <div class="bg-red-500 text-white p-3 rounded mb-4 text-center">
        <%= flash[:alert] %>
      </div>
    <% end %>

    <%= form_with(model: @chamado, url: chamados_path, local: true, multipart: true, class: "space-y-4") do |form| %>
      <div>
        <label for="chamado_tipo" class="block text-gray-300 text-sm font-bold mb-2">Tipo</label>
        <%= form.select :tipo, options_for_select([['Selecione o Tipo', ''], 'Incidente', 'Requisição'], @chamado.tipo), {}, { class: "shadow appearance-none border border-gray-600 rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline bg-gray-700 text-white", id: "chamado_tipo" } %>
      </div>

      <div>
        <label for="chamado_categoria" class="block text-gray-300 text-sm font-bold mb-2">Categoria</label>
        <%= form.select :categoria, options_for_select([['Selecione a Categoria', '']], @chamado.categoria), {}, { class: "shadow appearance-none border border-gray-600 rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline bg-gray-700 text-white", id: "chamado_categoria" } %>
      </div>

      <div>
        <label for="chamado_titulo" class="block text-gray-300 text-sm font-bold mb-2">Título</label>
        <%= form.text_field :titulo, class: "shadow appearance-none border border-gray-600 rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline bg-gray-700 text-white" %>
      </div>

      <div>
        <label for="chamado_descricao" class="block text-gray-300 text-sm font-bold mb-2">Descrição</label>
        <%= form.text_area :descricao, rows: 5, class: "shadow appearance-none border border-gray-600 rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline bg-gray-700 text-white" %>
      </div>

      <%# CAMPO ANEXAR ARQUIVO %>
      <div>
        <label for="chamado_arquivo" class="block text-gray-300 text-sm font-bold mb-2">Anexar Arquivo</label>
        <%= form.file_field :arquivo, class: "shadow appearance-none border border-gray-600 rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline bg-gray-700 text-white cursor-pointer" %>
        <p class="text-gray-400 text-xs mt-1">Permitido: .odt, .doc(x), .pdf, .png, .jpeg (Máx. 300KB)</p>
      </div>

      <div class="flex items-center justify-between pt-4">
        <%= form.submit "Abrir Chamado", class: "bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline cursor-pointer" %>
        <%= link_to "Voltar ao Dashboard", dashboard_path, class: "bg-gray-600 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline cursor-pointer" %>
      </div>
    <% end %>
  </div>
</div>

<script>
  document.addEventListener('turbo:load', function() { /* Linha ALTERADA AQUI! */
    const tipoSelect = document.getElementById('chamado_tipo');
    const categoriaSelect = document.getElementById('chamado_categoria');

    const categorias = {
      'Incidente': [
        'Computador com problema',
        'Problema ao acessar site',
        'Sistema fora do ar',
        'Periférico com problema'
      ],
      'Requisição': [
        'Novo computador',
        'Solicitação de periféricos',
        'Reset de senha do portal',
        'Criação de usuário para portal'
      ]
    };

    function updateCategorias() {
      // Garante que os elementos existem antes de tentar manipulá-los
      if (!tipoSelect || !categoriaSelect) {
        console.warn('Elementos Tipo ou Categoria não encontrados. O script não pode ser inicializado.');
        return;
      }

      const selectedTipo = tipoSelect.value;
      const categoriaOptions = categorias[selectedTipo] || [];

      // Limpa as opções atuais
      categoriaSelect.innerHTML = '<option value="">Selecione a Categoria</option>';

      // Adiciona as novas opções
      categoriaOptions.forEach(function(categoria) {
        const option = document.createElement('option');
        option.value = categoria;
        option.textContent = categoria;
        categoriaSelect.appendChild(option);
      });
    }

    // Adiciona um listener para quando o tipo mudar
    if (tipoSelect) { // Verifica se tipoSelect existe antes de adicionar o listener
        tipoSelect.addEventListener('change', updateCategorias);
    }
    
    // Chama a função uma vez para popular a categoria se um tipo já estiver selecionado (ex: após erro de validação)
    updateCategorias();
  });
</script>